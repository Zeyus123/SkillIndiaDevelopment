Java Exception Handling Keywords
Java provides specific keywords for exception handling purposes.

throw – We know that if an error occurs, an exception object is getting created and then Java runtime starts processing to handle them. Sometimes we might want to generate exceptions explicitly in our code, for example in a user authentication program we should throw exceptions to clients if the password is null. The throw keyword is used to throw exceptions to the runtime to handle it.
Ex: throw new ArithMeticException("Invalid Operation"); //Built in Exception 
Ex: throw new PersonVoteInvalidAgeException("Invalid Age"); //Custom Exception


throws – When we are throwing an exception in a method and not handling it, then we have to use the throws keyword in the method signature to let the caller program know the exceptions that might be thrown by the method. The caller method might handle these exceptions or propagate them to its caller method using the throws keyword. We can provide multiple exceptions in the throws clause and it can be used with the main() method also.

class ThrowsDemo{
	void writeToAFile(File fileObject) throws FileNotFoundException{
		FileReader fileReader = new FileReader("dummy")
	}

	public static void main(String args[]){
		try{
			writeToAFile(new File("test"));
		}catch(FileNotFoundException e){
			System.out.println("Possiblity of an exception!");
		}
	}
}

try-catch – We use try-catch block for exception handling in our code. try is the start of the block and catch is at the end of the try block to handle the exceptions. We can have multiple catch blocks with a try block. The try-catch block can be nested too. The catch block requires a parameter that should be of type Exception.

finally – the finally block is optional and can be used only with a try-catch block. Since exception halts the process of execution, we might have some resources open that will not get closed, so we can use the finally block. The finally block gets executed always, whether an exception occurred or not.